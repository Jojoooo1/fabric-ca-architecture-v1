# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '2'

services:
  peer-base:
    image: hyperledger/fabric-peer:$IMAGE_TAG
    restart: always
    environment:
      # Docker socket: used to communicate with the host daemon from within a container.
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # Starts chaincode containers on the same bridge network as the peers
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic
      - FABRIC_LOGGING_SPEC=INFO
      # Core options
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_PROFILE_ENABLED=true
      # Enables TLS
      - CORE_PEER_TLS_ENABLED=$CORE_PEER_TLS_ENABLED
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt

      #  Mutual TLS: Verify the certificate of a client (another peer node, application, or the CLI) during a TLS handshake
      #  By default, a peer node will use the **SAME** certificate and private key pair when acting as a TLS SERVER and CLIENT (change it if enabled)
      #- CORE_PEER_TLS_CLIENTAUTHREQUIRED=true # client is required to send its certificate during a TLS handshake
      #- CORE_PEER_TLS_CLIENTROOTCAS_FILES= # fully qualified path of the CA chain file
      #- CORE_PEER_TLS_CLIENTCERT_FILE= # fully qualified path of the client certificate
      #- CORE_PEER_TLS_CLIENTKEY_FILE= # fully qualified path of the client key
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: peer node start
